"use strict";
var Promise = require("bluebird");
var child_process_1 = require("child_process");
function setHostname(hostname) {
    return new Promise(function (resolve, reject) {
        child_process_1.exec('avahi-set-host-name ' + hostname, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve(true);
            }
        });
    });
}
exports.setHostname = setHostname;
function getHosts() {
    return new Promise(function (resolve, reject) {
        var results = [];
        child_process_1.exec('avahi-browse -a -r -t', function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                var result = stdout.split('\n');
                for (var i = 0; i < result.length; i++) {
                    var row = result[i];
                    if (row.includes("=") && (row.includes("IPv4") || row.includes("IPv6"))) {
                        var words = row.split(' ');
                        var device = words[1];
                        if (row.includes("IPv4")) {
                            results.push({ interface: device, ipv4: true, ipv6: false });
                        }
                        else if (row.includes("IPv6")) {
                            results.push({ interface: device, ipv6: true, ipv4: false });
                        }
                    }
                    else if (row.includes("=")) {
                        results[results.length - 1][row.split('=')[0].replace(/ /g, '')] = row.split('[')[1].split(']')[0];
                    }
                }
                var newones = [];
                for (var i = 0; i < results.length; i++) {
                    if (results[i].ipv6) {
                        results[i].ipv6 = results[i].address;
                        results[i].port = parseInt(results[i].port);
                        for (var r = 0; r < results.length; r++) {
                            if (results[r].ipv4 && results[r].hostname === results[i].hostname) {
                                results[i].ipv4 = results[r].address;
                                results[r].delete = true;
                            }
                        }
                    }
                }
                for (var i = 0; i < results.length; i++) {
                    var newobj = Object['assign']({}, results[i]);
                    if (newobj.delete) {
                    }
                    else {
                        delete newobj.address;
                        newones.push(newobj);
                    }
                }
                resolve(newones);
            }
        });
    });
}
exports.getHosts = getHosts;
function whereHostNameIsLike(name) {
    return new Promise(function (resolve, reject) {
        getHosts().then(function (hosts) {
            var hostlikes = [];
            for (var i = 0; i < hosts.length; i++) {
                if (hosts[i].hostname['includes'](name)) {
                    hostlikes.push(hosts[i]);
                }
            }
            resolve(hostlikes);
        }).catch(function (err) {
            reject(err);
        });
    });
}
exports.whereHostNameIsLike = whereHostNameIsLike;

//# sourceMappingURL=data:application/json;base64,
